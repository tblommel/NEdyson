/// Get a build dir based on name
def build_dir_name(name) { "build.tmp/${name}" }

/// Calling shell for the particular phase
def call_phase(phase, name, compiler, build_config) {
    sh """export PHASE=${phase}
          export COMPILER=${compiler}
          export BUILD_CONFIG=${build_config}
          export BUILD_DIR='${build_dir_name(name)}'
          pwd
          sh ./ci/build.jenkins.pauli.sh
       """
}

/// Report status to GitHub
void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/tblommel+jenkins.status/NEdyson"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

/// Sub-pipeline for a project; returns closure defining the sub-pipe
def sub_pipe(name, compiler, build_config) {
    { ->
        stage("Sub-pipeline with ${name}") {
            stash(name: name)
            node("master-node") {
              unstash(name: name)
              echo "Config step with compiler=${compiler} build=${build_config}"
              call_phase('cmake', name, compiler, build_config)
              echo "Build step with compiler=${compiler} build=${build_config}"
              call_phase('make', name, compiler, build_config)
              echo "Test step with compiler=${compiler} build=${build_config}"
              call_phase('test', name, compiler, build_config)
              junit "${build_dir_name(name)}/test/report.xml"
            }
        }
    }
}


pipeline {
    agent {
        node {
            label 'master-node'
        }

    }

    environment {
        COMPILERS = 'gcc_7.3.0'
        CONFIGS = 'Debug,Release'
    }

    stages {
        stage('Status update') {
            steps {
                echo 'DEBUG: Sending PENDING status to GitHub'
                setBuildStatus("Jenkins build has started", 'PENDING')
            }
        }
        stage('Parallel stages') {
            steps {
                script {

                    projects = [:]
                    for (comp in COMPILERS.tokenize(',')) {
                        for (conf in CONFIGS.tokenize(',')) {
                            key="compiler=${comp}_build=${conf}"
                            projects[key]=sub_pipe("comp=${comp} build=${conf}", comp, conf)
                        }
                    }
                    echo "DEBUG: Projects: ${projects}"
                    parallel (projects)

                } // end script
            } // end steps
        } // end stage
    } // end stages
    post {
        always {
            echo 'DEBUG: Build is over'
        }
        success {
            echo 'DEBUG: Build successful'
            setBuildStatus('Jenkins build is successful', 'SUCCESS')
        }
        unstable {
            echo 'DEBUG: Build is unstable'
            setBuildStatus('Jenkins build is unstable', 'ERROR')
            emailext to: 'tblommel+jenkins.status@umich.edu',
                     recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
                     subject: 'NEdyson: Jenkins build is unstable',
                     attachLog: true,
                     compressLog: true,
                     body: "NEdyson build is unstable: see attached log"
        }
        failure {
            echo 'DEBUG: Build failed'
            setBuildStatus('Jenkins build failed', 'FAILURE')
            emailext to: 'tblommel+jenkins.status@umich.edu',
                     recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
                     subject: 'NEdyson: Jenkins build has failed',
                     attachLog: true,
                     compressLog: true,
                     body: "NEdyson build has failed: see attached log"
        }
        changed {
            echo 'DEBUG: Build status changed'
            emailext to: 'tblommel+jenkins.status@umich.edu',
                     recipientProviders: [brokenTestsSuspects(), culprits(), requestor()],
                     subject: 'NEdyson: Jenkins build status changed',
                     attachLog: true,
                     compressLog: true,
                     body: "NEdyson build status changed"
        }

    }
}
