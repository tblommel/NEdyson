molNEsim_decomp_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_decomp_impl.h:      p_NEgf2_ = std::unique_ptr<molGF2SolverDecomp>(new molGF2SolverDecomp(p_MatSim_->Vija(), dynamic_cast<gfmol::DecompGF2Solver *>(p_MatSim_->p_sigma().get())->Viaj() ));
molNEsim_decomp_impl.h:  Dyson.G0_from_h0(G, p_MatSim_->mu(), p_MatSim_->fock(), p_MatSim_->frepr().beta(), dt_);
molNEsim_decomp_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_decomp_impl.h:      ZMatrixMap(hmf.data() + tstp*nao_*nao_, nao_, nao_) = DMatrixConstMap(p_MatSim_->fock().data(),nao_,nao_);
molNEsim_decomp_impl.h:      if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_impl.h:    err = Dyson.dyson_start(G, Sigma, hmf, p_MatSim_->mu(), beta_, dt_);
molNEsim_decomp_impl.h:    p_NEgf2_->solve_HF(tstp, hmf, rho);
molNEsim_decomp_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_impl.h:    Dyson.dyson_step(tstp, G, Sigma, hmf, p_MatSim_->mu(), beta_, dt_);
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/mu", p_MatSim_->mu());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/params/filling", p_MatSim_->filling());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_decomp_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_decomp_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_decomp_impl.h:      p_NEgf2_ = std::unique_ptr<tti_molGF2SolverDecomp>(new tti_molGF2SolverDecomp(p_MatSim_->Vija(), dynamic_cast<gfmol::DecompGF2Solver *>(p_MatSim_->p_sigma().get())->Viaj() ));
molNEsim_decomp_impl.h:  Dyson.G0_from_h0(G, p_MatSim_->mu(), p_MatSim_->fock(), p_MatSim_->frepr().beta(), dt_);
molNEsim_decomp_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_decomp_impl.h:      if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_impl.h:    err = Dyson.dyson_start(G, Sigma, p_MatSim_->fock(), p_MatSim_->mu(), beta_, dt_);
molNEsim_decomp_impl.h:    auto hmfmat = DMatrixConstMap(p_MatSim_->fock().data(), nao_, nao_);
molNEsim_decomp_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_impl.h:    Dyson.dyson_step(tstp, G, Sigma, p_MatSim_->fock(), p_MatSim_->mu(), beta_, dt_);
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/mu", p_MatSim_->mu());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/hmf", p_MatSim_->fock());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/params/filling", p_MatSim_->filling());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_decomp_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_decomp_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_decomp_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
integration.h:				if(j<=k_) return gregory_Omega_[(n-k_-1)*(k_+1)+j];
dyson_tti_boot.h:    auto matmap = ZColVectorMap(G.matptr(ntau_-m), es_);
molNEsim_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_impl.h:      p_NEgf2_ = std::unique_ptr<molGF2Solver>(new molGF2Solver(hf.uchem(), dynamic_cast<gfmol::GF2Solver *>(p_MatSim_->p_sigma().get())->Vijkl_exch() ));
molNEsim_impl.h:  Dyson.G0_from_h0(G, p_MatSim_->mu(), p_MatSim_->fock(), p_MatSim_->frepr().beta(), dt_);
molNEsim_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_impl.h:      ZMatrixMap(hmf.data() + tstp*nao_*nao_, nao_, nao_) = DMatrixConstMap(p_MatSim_->fock().data(),nao_,nao_);
molNEsim_impl.h:      if(!hfbool_)  p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_impl.h:    err = Dyson.dyson_start(G, Sigma, hmf, p_MatSim_->mu(), beta_, dt_);
molNEsim_impl.h:    p_NEgf2_->solve_HF(tstp, hmf, rho);
molNEsim_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_impl.h:    Dyson.dyson_step(tstp, G, Sigma, hmf, p_MatSim_->mu(), beta_, dt_);
molNEsim_impl.h:    p_NEgf2_->solve(t, Sigma, G);
molNEsim_impl.h:  h5e::dump(file, path + "/mu", p_MatSim_->mu());
molNEsim_impl.h:  h5e::dump(file, path + "/params/filling", p_MatSim_->filling());
molNEsim_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_impl.h:  h5e::dump(file, path + "/rhoM", p_MatSim_->rho());
molNEsim_impl.h:  h5e::dump(file, path + "/hmfM", p_MatSim_->fock());
molNEsim_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_impl.h:      p_NEgf2_ = std::unique_ptr<tti_molGF2Solver>(new tti_molGF2Solver(hf.uchem(), dynamic_cast<gfmol::GF2Solver *>(p_MatSim_->p_sigma().get())->Vijkl_exch() ));
molNEsim_impl.h:  Dyson.G0_from_h0(G, p_MatSim_->mu(), p_MatSim_->fock(), p_MatSim_->frepr().beta(), dt_);
molNEsim_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_impl.h:      if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_impl.h:    err = Dyson.dyson_start(G, Sigma, p_MatSim_->fock(), p_MatSim_->mu(), beta_, dt_);
molNEsim_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_impl.h:    Dyson.dyson_step(tstp, G, Sigma, p_MatSim_->fock(), p_MatSim_->mu(), beta_, dt_);
molNEsim_impl.h:  h5e::dump(file, path + "/mu", p_MatSim_->mu());
molNEsim_impl.h:  h5e::dump(file, path + "/hmf", p_MatSim_->fock());
molNEsim_impl.h:  h5e::dump(file, path + "/params/filling", p_MatSim_->filling());
molNEsim_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_impl.h:    auto hmfmat = DMatrixConstMap(p_MatSim_->fock().data(), nao_, nao_);
molNEsim_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_spin_impl.h:      p_NEgf2_ = std::unique_ptr<molGF2SolverSpin>(new molGF2SolverSpin(hf.uchem(), dynamic_cast<gfmol::GF2SolverSpin *>(p_MatSim_->p_sigma().get())->Vijkl_exch() ));
molNEsim_spin_impl.h:  Dyson.G0_from_h0(Gup, p_MatSim_->mu()[0], p_MatSim_->fock().data(), p_MatSim_->frepr().beta(), dt_);
molNEsim_spin_impl.h:  Dyson.G0_from_h0(Gdown, p_MatSim_->mu()[1], p_MatSim_->fock().data() + nao_*nao_, p_MatSim_->frepr().beta(), dt_);
molNEsim_spin_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_spin_impl.h:      ZMatrixMap(hmf.data() + tstp*nao2, nao_, nao_) = DMatrixConstMap(p_MatSim_->fock().data(),nao_,nao_);
molNEsim_spin_impl.h:      ZMatrixMap(hmf.data() + (nt_+1)*nao2 + tstp*nao2, nao_, nao_) = DMatrixConstMap(p_MatSim_->fock().data() + nao2, nao_, nao_);
molNEsim_spin_impl.h:      if(!hfbool_)  p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_spin_impl.h:    err = Dyson.dyson_start(Gup, Sup, hmf.data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_spin_impl.h:    err = Dyson.dyson_start(Gdown, Sdown, hmf.data() + (nt_+1)*nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_spin_impl.h:    p_NEgf2_->solve_HF(tstp, hmf, rho);
molNEsim_spin_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_spin_impl.h:    Dyson.dyson_step(tstp, Gup, Sup, hmf.data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_spin_impl.h:    Dyson.dyson_step(tstp, Gdown, Sdown, hmf.data() + (nt_+1)*nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_spin_impl.h:  h5e::dump(file, path + "/mu", std::vector<double>{p_MatSim_->mu()[0], p_MatSim_->mu()[1]});
molNEsim_spin_impl.h:  h5e::dump(file, path + "/params/filling", std::vector<double>{p_MatSim_->filling()[0], p_MatSim_->filling()[1]});
molNEsim_spin_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_spin_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_spin_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_spin_impl.h:      p_NEgf2_ = std::unique_ptr<tti_molGF2SolverSpin>(new tti_molGF2SolverSpin(hf.uchem(), dynamic_cast<gfmol::GF2SolverSpin *>(p_MatSim_->p_sigma().get())->Vijkl_exch() ));
molNEsim_spin_impl.h:  Dyson.G0_from_h0(Gup, p_MatSim_->mu()[0], p_MatSim_->fock().data(), p_MatSim_->frepr().beta(), dt_);
molNEsim_spin_impl.h:  Dyson.G0_from_h0(Gdown, p_MatSim_->mu()[1], p_MatSim_->fock().data() + nao_*nao_, p_MatSim_->frepr().beta(), dt_);
molNEsim_spin_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_spin_impl.h:      auto hmfmat = DMatrixConstMap(p_MatSim_->fock().data()+s*nao2, nao_, nao_);
molNEsim_spin_impl.h:      if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_spin_impl.h:    err = Dyson.dyson_start(Gup, Sup, p_MatSim_->fock().data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_spin_impl.h:    err = Dyson.dyson_start(Gdown, Sdown, p_MatSim_->fock().data() + nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_spin_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_spin_impl.h:    Dyson.dyson_step(tstp, Gup, Sup, p_MatSim_->fock().data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_spin_impl.h:    Dyson.dyson_step(tstp, Gdown, Sdown, p_MatSim_->fock().data() + nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_spin_impl.h:  h5e::dump(file, path + "/mu", std::vector<double>{p_MatSim_->mu()[0], p_MatSim_->mu()[1]});
molNEsim_spin_impl.h:  h5e::dump(file, path + "/hmf", p_MatSim_->fock());
molNEsim_spin_impl.h:  h5e::dump(file, path + "/params/filling", std::vector<double>{p_MatSim_->filling()[0], p_MatSim_->filling()[1]});
molNEsim_spin_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_spin_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_spin_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
dyson_tti_integrals.h:      ZMatrixMap MatMap = ZMatrixMap(B.matptr(ntau_-j), nao_, nao_);
dyson_tti_integrals.h:  else if(m > ntau_-k_) {          // Use starting weights
dyson_tti_integrals.h:        resMap.noalias() += I.rcorr(ntau_-m,j,l) * ZMatrixMap(ATVptr-l*es_, nao_, nao_) * BMMap;
dyson_tti_integrals.h:  else if(ntau_-m >= k_+k_+1){     // Use greg and ones
dyson_tti_integrals.h:    for(l=k_+1; l<ntau_-m-k_; l++) {
dyson_tti_integrals.h:    for(l=ntau_-m-k_; l<=ntau_-m; l++) {
dyson_tti_integrals.h:      resMap.noalias() += I.omega(ntau_-m-l) * ZMatrixMap(ATVptr, nao_, nao_) * ZMatrixMap(BMptr, nao_, nao_);
dyson_tti_integrals.h:    for(l=0; l<=ntau_-m; l++) {
dyson_tti_integrals.h:      resMap.noalias() += I.gregory_weights(ntau_-m,l) * ZMatrixMap(ATVptr, nao_, nao_) * ZMatrixMap(BMptr, nao_, nao_);
molNEsim_decomp_spin_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_decomp_spin_impl.h:      p_NEgf2_ = std::unique_ptr<molGF2SolverSpinDecomp>(new molGF2SolverSpinDecomp(p_MatSim_->Vija(), dynamic_cast<gfmol::DecompGF2SolverSpin *>(p_MatSim_->p_sigma().get())->Viaj() ));
molNEsim_decomp_spin_impl.h:  Dyson.G0_from_h0(Gup, p_MatSim_->mu()[0], p_MatSim_->fock().data(), p_MatSim_->frepr().beta(), dt_);
molNEsim_decomp_spin_impl.h:  Dyson.G0_from_h0(Gdown, p_MatSim_->mu()[1], p_MatSim_->fock().data() + nao_*nao_, p_MatSim_->frepr().beta(), dt_);
molNEsim_decomp_spin_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_decomp_spin_impl.h:      ZMatrixMap(hmf.data() + tstp*nao2, nao_, nao_) = DMatrixConstMap(p_MatSim_->fock().data(),nao_,nao_);
molNEsim_decomp_spin_impl.h:      ZMatrixMap(hmf.data() + (nt_+1)*nao2 + tstp*nao2, nao_, nao_) = DMatrixConstMap(p_MatSim_->fock().data() + nao2, nao_, nao_);
molNEsim_decomp_spin_impl.h:      if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_spin_impl.h:    err = Dyson.dyson_start(Gup, Sup, hmf.data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_decomp_spin_impl.h:    err = Dyson.dyson_start(Gdown, Sdown, hmf.data() + (nt_+1)*nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_decomp_spin_impl.h:    p_NEgf2_->solve_HF(tstp, hmf, rho);
molNEsim_decomp_spin_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_spin_impl.h:    Dyson.dyson_step(tstp, Gup, Sup, hmf.data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_decomp_spin_impl.h:    Dyson.dyson_step(tstp, Gdown, Sdown, hmf.data() + (nt_+1)*nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/mu", std::vector<double>{p_MatSim_->mu()[0], p_MatSim_->mu()[1]});
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/params/filling", std::vector<double>{p_MatSim_->filling()[0], p_MatSim_->filling()[1]});
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_decomp_spin_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      beta_ = p_MatSim_->frepr().beta();
molNEsim_decomp_spin_impl.h:      p_NEgf2_ = std::unique_ptr<tti_molGF2SolverSpinDecomp>(new tti_molGF2SolverSpinDecomp(p_MatSim_->Vija(), dynamic_cast<gfmol::DecompGF2SolverSpin *>(p_MatSim_->p_sigma().get())->Viaj() ));
molNEsim_decomp_spin_impl.h:  Dyson.G0_from_h0(Gup, p_MatSim_->mu()[0], p_MatSim_->fock().data(), p_MatSim_->frepr().beta(), dt_);
molNEsim_decomp_spin_impl.h:  Dyson.G0_from_h0(Gdown, p_MatSim_->mu()[1], p_MatSim_->fock().data() + nao_*nao_, p_MatSim_->frepr().beta(), dt_);
molNEsim_decomp_spin_impl.h:  p_MatSim_->run(MatMax_, MatTol_, nullptr);
molNEsim_decomp_spin_impl.h:      if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_spin_impl.h:    err = Dyson.dyson_start(Gup, Sup, p_MatSim_->fock().data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_decomp_spin_impl.h:    err = Dyson.dyson_start(Gdown, Sdown, p_MatSim_->fock().data() + nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_decomp_spin_impl.h:    if(!hfbool_) p_NEgf2_->solve(tstp, Sigma, G);
molNEsim_decomp_spin_impl.h:    Dyson.dyson_step(tstp, Gup, Sup, p_MatSim_->fock().data(), p_MatSim_->mu()[0], beta_, dt_);
molNEsim_decomp_spin_impl.h:    Dyson.dyson_step(tstp, Gdown, Sdown, p_MatSim_->fock().data() + nao2, p_MatSim_->mu()[1], beta_, dt_);
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/mu", std::vector<double>{p_MatSim_->mu()[0], p_MatSim_->mu()[1]});
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/hmf", p_MatSim_->fock());
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/params/filling", std::vector<double>{p_MatSim_->filling()[0], p_MatSim_->filling()[1]});
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/energy/EkinM", p_MatSim_->ehf() + p_MatSim_->ekin());
molNEsim_decomp_spin_impl.h:  h5e::dump(file, path + "/energy/EpotM", p_MatSim_->epot());
molNEsim_decomp_spin_impl.h:      auto hmfmat = DMatrixConstMap(p_MatSim_->fock().data()+s*nao2, nao_, nao_);
molNEsim_decomp_spin_impl.h:  int nL = p_MatSim_->frepr().nl();
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->gl().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data()+i, nL, Eigen::InnerStride<>(nao2));
molNEsim_decomp_spin_impl.h:      Eigen::Map<const DColVector, 0, Eigen::InnerStride<> >(p_MatSim_->sigmal().data() + nL*nao_*nao_ + i, nL, Eigen::InnerStride<>(nao2));
dyson.cpp:    jcut = (l<=n-k_-1)?k_:(n-l-1);
dyson_boot.h:    auto matmap = ZColVectorMap(G.matptr(ntau_-m), es_);
dyson_boot_hf.h:    auto matmap = ZColVectorMap(G.matptr(ntau_-m), es_);
dyson_integrals.h://    res2 += I.gregory_weights(ntau_, i) * ZMatrixConstMap(Sig.tvptr(tstp, i), nao_, nao_).cwiseProduct(ZMatrixConstMap(G.tvptr(tstp, ntau_-i), nao_, nao_).conjugate()).sum();
dyson_integrals.h:      ZMatrixMap MatMap = ZMatrixMap(B.matptr(ntau_-j), nao_, nao_);
dyson_integrals.h:  else if(m > ntau_-k_) {          // Use starting weights
dyson_integrals.h:        resMap.noalias() += I.rcorr(ntau_-m,j,l) * ZMatrixMap(ATVptr-l*es_, nao_, nao_) * BMMap;
dyson_integrals.h:  else if(ntau_-m >= k_+k_+1){     // Use greg and ones
dyson_integrals.h:    for(l=k_+1; l<ntau_-m-k_; l++) {
dyson_integrals.h:    for(l=ntau_-m-k_; l<=ntau_-m; l++) {
dyson_integrals.h:      resMap.noalias() += I.omega(ntau_-m-l) * ZMatrixMap(ATVptr, nao_, nao_) * ZMatrixMap(BMptr, nao_, nao_);
dyson_integrals.h:    for(l=0; l<=ntau_-m; l++) {
dyson_integrals.h:      resMap.noalias() += I.gregory_weights(ntau_-m,l) * ZMatrixMap(ATVptr, nao_, nao_) * ZMatrixMap(BMptr, nao_, nao_);
dyson_integrals.h:  for(j=0; j<=ntau_; j++) ZMatrixMap(NTauTmp.data() + j*es_, nao_, nao_).noalias() = (double)sig * cplxi * (ZMatrixMap(Bcc.tvptr(m,ntau_-j), nao_, nao_).adjoint());
dyson_integrals.h:      for(m=k_+1; m<ntau_-k_; m++) {
dyson_integrals.h:      for(m=ntau_-k_; m<=ntau_; m++) {
dyson_integrals.h:        resMap.noalias() += I.omega(ntau_-m) * ZMatrixMap(A.tvptr(n,m), nao_, nao_) * ZMatrixMap(NTauTmp.data() + m*es_, nao_, nao_);
dyson_tti_boot_hf.h:    auto matmap = ZColVectorMap(G.matptr(ntau_-m), es_);
